// C++ code

// PINS CONFIGURATION 
const int NUM_ROOMS = 2; // Reduced for Tinkercad stability

// Sensor Pins
const int pirPins[NUM_ROOMS] = {2, 3};     // PIR OUTPUT pins (D2,D3)
const int ldrPins[NUM_ROOMS] = {A0, A1};   // LDR pins (A0,A1)

// Actuator Pins
const int lightPins[NUM_ROOMS] = {9, 10};  // Room LEDs (D9,D10)
const int ALARM_LED = 13;                   // Built-in LED (D13)
const int BUZZER_PIN = 4;                   // Buzzer (D4)

// Fault Monitoring Variables
unsigned long lastUpdate[NUM_ROOMS] = {0};
int lastLightLevels[NUM_ROOMS] = {0};

void setup() {
  Serial.begin(9600);
  
  // Initialize sensor pins
  for(int room=0; room<NUM_ROOMS; room++){
    pinMode(pirPins[room], INPUT);
    pinMode(lightPins[room], OUTPUT);
  }
  
  pinMode(ALARM_LED, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  
  Serial.println("System Ready");
}

void loop() {
  // Main system logic
  for(int room=0; room<NUM_ROOMS; room++){
    controlRoom(room);
  }
  
  handleFaultMonitor(); // Check sensor health
  delay(100);
}

void setup() {
  pinMode(BUZZER_PIN, OUTPUT); // Set as OUTPUT
}

void controlRoom(int room) {
  bool motion = digitalRead(pirPins[room]);
  int light = analogRead(ldrPins[room]);
  
  // Basic lighting control
  if(motion && light < 500){
    digitalWrite(lightPins[room], HIGH);
  } else {
    digitalWrite(lightPins[room], LOW);
  }
}

// FAULT MONITORING 
void handleFaultMonitor() {
  const unsigned long timeout = 30000; // 30-second timeout
  
  for(int room=0; room<NUM_ROOMS; room++){
    int currentLight = analogRead(ldrPins[room]);
    bool currentMotion = digitalRead(pirPins[room]);
    
    // Detect activity (either light change >10% or motion)
    if(abs(currentLight - lastLightLevels[room]) > 50 || currentMotion){
      lastUpdate[room] = millis();
      lastLightLevels[room] = currentLight;
    } 
    // Timeout check
    else if(millis() - lastUpdate[room] > timeout){
      triggerFault(room);
      lastUpdate[room] = millis(); // Prevent repeated alarms
    }
  }
}

void triggerFault(int room) {
  Serial.print("FAULT: Room ");
  Serial.print(room);
  Serial.println(" sensors offline!");
  
  // Visual alarm (blink room LED + built-in LED)
  for(int i=0; i<3; i++){
    digitalWrite(lightPins[room], HIGH);
    digitalWrite(ALARM_LED, HIGH);
    tone(BUZZER_PIN, 2000);
    delay(300);
    digitalWrite(lightPins[room], LOW);
    digitalWrite(ALARM_LED, LOW);
    noTone(BUZZER_PIN);
    delay(300);
  }
}


Link to Simulation Video:  https://youtu.be/XGx-5GPraqo

// First prompt on DeepSeek - Steps for creating circuit with Arduino controller 
// that will enable the following: 
//Advanced IoT Smart Home Ecosystem with Scenario Testing and Reporting

//Last prompt on DeepSeek is ldr photoresistor?
