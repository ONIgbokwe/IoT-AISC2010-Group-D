#include <Wire.h>               // Required for I2C communication (LCD)
#include <LiquidCrystal_I2C.h>  // For I2C LCD
#include <Servo.h>              // For servo motor control
 
// LCD setup (I2C Address: 0x27, 16 columns, 2 rows)

LiquidCrystal_I2C lcd(0x27, 16, 2);
 
// Servo setup for curtain simulation

Servo curtain;

const int curtainServoPin = 9;
 
// Pin Definitions for LEDs and Buzzer

const int fanPin = 2;
const int heaterPin = 4;
const int coolerPin = 5;
const int humidifierPin = 6;
const int buzzerPin = 8;
 
// Variables for Light Level

String lightingLevel = "Low";  // Initialize lighting as "Low"
 
void setup() {

  // Initialize serial communication

  Serial.begin(9600);

  // Initialize LCD

  lcd.init();           // Correct initialization for I2C LCD

  lcd.backlight();      // Turn on backlight

  lcd.print("Weather Control");

  // Set pins for output devices

  pinMode(fanPin, OUTPUT);
  pinMode(heaterPin, OUTPUT);
  pinMode(coolerPin, OUTPUT);
  pinMode(humidifierPin, OUTPUT);
  pinMode(buzzerPin, OUTPUT);

  // Initialize the servo motor for curtain simulation

  curtain.attach(curtainServoPin);

  curtain.write(0);  // Start with curtains open

  // Delay to show intro text on LCD

  delay(2000);

  lcd.clear();
 
  // Print weather options in Serial Monitor

  Serial.println("Please input one of the following weather conditions:");
  Serial.println("Options:");
  Serial.println("1. sunny");
  Serial.println("2. cloudy");
  Serial.println("3. rain");
  Serial.println("4. snow");
  Serial.println("5. wind");
  Serial.println("6. storm");
  Serial.println();
  Serial.println("Enter your choice: (e.g., sunny, cloudy, rain, snow, wind, storm)");

}
 
void loop() {

  // Read weather condition input from Serial Monitor

  if (Serial.available() > 0) {

    String weather = Serial.readStringUntil('\n');

    weather.trim();  // Remove any extra spaces
 
    // Reset all devices and brightness

    digitalWrite(fanPin, LOW);
    digitalWrite(heaterPin, LOW);
    digitalWrite(coolerPin, LOW);
    digitalWrite(humidifierPin, LOW);
    digitalWrite(buzzerPin, LOW);
    curtain.write(0);  // Default: open curtains
 
    // Control brightness and components based on weather

    if (weather == "sunny") {

      lightingLevel = "Low";
      digitalWrite(fanPin, HIGH);
      digitalWrite(coolerPin, HIGH);
      curtain.write(90);
      digitalWrite(heaterPin, LOW);
      digitalWrite(humidifierPin, LOW);

      Serial.println("Fan : ON");
      Serial.println("Cooler : ON");
      Serial.println("Curtain : Open");
      Serial.println("Heater : OFF");
      Serial.println("Humidifier : OFF ");

    } 

    else if (weather == "cloudy") {

      lightingLevel = "Medium";
      digitalWrite(fanPin, LOW);
      digitalWrite(coolerPin, LOW);
      curtain.write(90);
      digitalWrite(heaterPin, HIGH);
      digitalWrite(humidifierPin, HIGH);
      
      Serial.println("Fan : OFF");
      Serial.println("Cooler : OFF");
      Serial.println("Curtain : Open");
      Serial.println("Heater : ON");
      Serial.println("Humidifier : ON ");

    } 

    else if (weather == "rain") {

      lightingLevel = "Medium";
      digitalWrite(fanPin, LOW);
      digitalWrite(coolerPin, LOW);
      curtain.write(0);
      digitalWrite(heaterPin, HIGH);
      digitalWrite(humidifierPin, LOW);
      
      Serial.println("Fan : OFF");
      Serial.println("Cooler : OFF");
      Serial.println("Curtain : Closed");
      Serial.println("Heater : ON");
      Serial.println("Humidifier : OFF ");

    } 

    else if (weather == "snow") {

      lightingLevel = "High";
      digitalWrite(fanPin, LOW);
      digitalWrite(coolerPin, LOW);
      curtain.write(90);
      digitalWrite(heaterPin, HIGH);
      digitalWrite(humidifierPin, HIGH);
      digitalWrite(buzzerPin, LOW);
      delay(1000);
      digitalWrite(buzzerPin, LOW);
      
      Serial.println("Fan : OFF");
      Serial.println("Cooler : OFF");
      Serial.println("Curtain : Open");
      Serial.println("Heater : ON");
      Serial.println("Humidifier : ON ");

    } 

    else if (weather == "wind") {

      lightingLevel = "Medium";
      digitalWrite(fanPin, LOW);
      digitalWrite(coolerPin, LOW);
      curtain.write(0);
      digitalWrite(heaterPin, LOW);
      digitalWrite(humidifierPin, LOW);
      
      Serial.println("Fan : ON");
      Serial.println("Cooler : ON");
      Serial.println("Curtain : Closed");
      Serial.println("Heater : OFF");
      Serial.println("Humidifier : OFF ");

    } 

    else if (weather == "storm") {

      lightingLevel = "Medium";
      digitalWrite(fanPin, LOW);
      digitalWrite(coolerPin, LOW);
      curtain.write(0);
      digitalWrite(heaterPin, HIGH);
      digitalWrite(humidifierPin, HIGH);
      digitalWrite(buzzerPin, HIGH);
      delay(1000);
      digitalWrite(buzzerPin, HIGH);
      
      Serial.println("Fan : OFF");
      Serial.println("Cooler : OFF");
      Serial.println("Curtain : Closed");
      Serial.println("Heater : ON");
      Serial.println("Humidifier : ON ");
      Serial.println("Buzzer : ON");

    }

    else {

      Serial.println("Invalid weather condition! Please input a valid option.");

      return;

    }
 
    // Update LCD display with the brightness level

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Lighting: ");
    lcd.print(lightingLevel);
    Serial.print("Weather set to: ");
    Serial.println(weather);

  }

}

 
